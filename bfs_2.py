# -*- coding: utf-8 -*-
"""BFS_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U-68n8u4XQXWmRRvgFxJ3PEj9LQrTsZq
"""

# -*- coding: latin-1 -*-

import matplotlib.pyplot as plt
import networkx as nx
import sys

def recomendar_amigos_lista(lista_adj, usuario_id):
   """
   Esta função gera recomendações de amizade para um usuário específico em um grafo representado por uma lista de adjacência passada como parâmetro
   (lista_adj): as conexões não valoradas e não direcionadas representam uma amizade.

   A função segue o conceito de "amigos de amigos" para gerar recomendações. Ela recomenda apenas amigos de amigos que ainda não sejam amigos diretos
   do usuário selecionado.

   Para isso, a função faz o seguinte:

   1. Inicializa duas estruturas de dados tipo conjunto: 'amigos_diretos' para armazenar os amigos diretos do usuário e 'recomendacoes' para armazenar as
   recomendações de amizade. Conjuntos são utilizados porque eles automaticamente evitam duplicatas e têm operações rápidas de adição e verificação de
   elementos (exemplo de criação de conjunto: recomendacoes = set() )

   2. Identifica os amigos diretos do usuário selecionado acessando a lista de adjacência na posição do usuário. Todos os amigos diretos são adicionados
   ao conjunto 'amigos_diretos'..

   3. Para cada amigo direto identificado, a função itera sobre a lista de adjacência desses amigos para encontrar amigos de amigos. Se o amigo de um
   amigo não for o usuário selecionado e não for um amigo direto, ele é adicionado ao conjunto 'recomendacoes'.

   4. Finalmente, a função retorna a lista de recomendações, convertendo o conjunto 'recomendacoes' em uma lista (list(recomendacoes)) para o resultado
   final.
   """

   recomendacoes = set()
   amigos_diretos = set()
   for amigo in lista_adj[usuario_id]:
      amigos_diretos.add(amigo)
   for amigo in amigos_diretos:
    for i in lista_adj[amigo]:
      if i != usuario_id and i not in amigos_diretos:
        recomendacoes.add(i)
   return list(recomendacoes)

def desenhar_recomendacoes_lista(lista_adj, usuario_id, recomendacoes, nomes_usuarios):
   """
   Desenha o grafo com o usuário selecionado e suas recomendações de amizade.
   Utiliza a biblioteca NetworkX para criação do grafo e Matplotlib para desenhar.
   """
   G = nx.Graph()    # Cria um grafo não direcionado.
   cores_nomes = {}  # Dicionário para armazenar as cores dos nós (nomes dos usuários).

   # Adiciona arestas ao grafo usando os nomes dos usuários.
   for i in range(len(lista_adj)):
      for j in lista_adj[i]:  # Itera sobre cada amigo na lista de adjacência.
         if i < j:  # Adiciona arestas apenas uma vez para evitar duplicação.
            G.add_edge(nomes_usuarios[i], nomes_usuarios[j])  # Adiciona aresta.

   # Define as cores dos nós baseando-se em nomes de usuários e recomendações.
   for i in range(len(lista_adj)):
      if i == usuario_id:
         cores_nomes[nomes_usuarios[i]] = 'black'  # Cor do usuário selecionado.

      elif i in recomendacoes:
         cores_nomes[nomes_usuarios[i]] = 'black'    # Cor para recomendações.
      else:
         cores_nomes[nomes_usuarios[i]] = 'black'  # Cor para os outros nós.

   # Calcula a posição dos nós para o layout do grafo.
   pos = nx.spring_layout(G)   # Usa o layout de mola para distribuir os nós.
   plt.figure(figsize=(6, 4))  # Define o tamanho da figura.

   # Define o título do grafo.
   nomes_recomendados = [nomes_usuarios[i] for i in recomendacoes]
   Tit = f"Recomendações de amizade para {nomes_usuarios[usuario_id]}:\n"
   Tit += ", ".join(nomes_recomendados) + "."
   plt.title(Tit)

   # Desenha o grafo com cores dos vértices em branco e peso de fonte em negrito.
   nx.draw(G, pos, with_labels=True, node_color='white', font_weight='bold')

   # Itera sobre cada item no dicionário "pos", que contém as posições dos nós do grafo. Cada item é uma chave-valor, onde a chave "node"
   # é o nome do nó (por exemplo, 'Ana', 'Bruno') e o valor "(x, y)" é uma tupla contendo as coordenadas de posição do nó no plano 2D.
   for node, (x, y) in pos.items():

      # Verifica se o nó atual é o usuário selecionado.
      if node == nomes_usuarios[usuario_id]:
         facecolor = '#47ff4e'  # Define a cor de fundo como verde.
         font_weight='800'
      # Se o nó não for o usuário selecionado, verifica se ele está na lista de recomendações.
      elif node in [nomes_usuarios[i] for i in recomendacoes]:
         facecolor = '#fa4d4d'  # Define a cor de fundo como vermelho claro para recomendações.
         font_weight='800'
      # Se o nó não for o usuário nem uma recomendação, define a cor de fundo como branca.
      else:
         facecolor = 'white'
         font_weight='400'
      # Desenha o texto do nome do nó no grafo com as configurações de cor de fundo e texto.
      plt.text(x, y, node, fontsize=12, ha='center', va='center',
              bbox=dict(facecolor=facecolor, edgecolor='black', boxstyle='round,pad=0.2'),
              color=cores_nomes[node], fontweight=font_weight)

   # Exibe a figura.
   plt.show()  # Mostra o grafo na tela.

def criar_grafo_exemplo_lista():
   """
   Cria um grafo exemplo com 10 vértices e uma densidade moderada para testar a recomendação de amizade.
   """
   # Lista de adjacência representando as conexões de amizade.
   lista_adj = [
      [1, 3, 5, 6],    # Ana: Bruno, Daniel, Fábio, Gabriela.
      [0, 2, 4],       # Bruno: Ana, Carla, Eduarda.
      [1, 5, 9],       # Carla: Bruno, Fábio, João.
      [0, 7, 8],       # Daniel: Ana, Henrique, Isabela.
      [1, 6, 9],       # Eduarda: Bruno, Gabriela, João.
      [0, 2, 8],       # Fábio: Ana, Carla, Isabela.
      [0, 4, 7],       # Gabriela: Ana, Eduarda, Henrique.
      [3, 6, 9],       # Henrique: Daniel, Gabriela, João.
      [3, 5, 9],       # Isabela: Daniel, Fábio, João.
      [2, 4, 7, 8]     # João: Carla, Eduarda, Henrique, Isabela.
   ]
   return lista_adj  # Retorna a lista de adjacência.

# Execução do exemplo de uso.
nomes_usuarios = ["Ana", "Bruno", "Carla", "Daniel", "Eduarda",
                 "Fabio", "Gabriela", "Henrique", "Isabela", "João"]
lista_adj = criar_grafo_exemplo_lista()  # Cria o grafo exemplo.

# Solicita ao usuário para escolher um nome da lista.
print("Usuários disponíveis:", ", ".join(nomes_usuarios))
nome_usuario = input("Digite o nome do usuário para ver as recomendações: ")
if nome_usuario not in nomes_usuarios:
    sys.exit("\nErro: usuário não encontrado! Digite um nome válido.\n")  # Encerra o programa imediatamente
else:
  usuario_id = nomes_usuarios.index(nome_usuario)  # Obtém o índice do usuário selecionado.

# Gera e exibe as recomendações de amizade.
recomendacoes = recomendar_amigos_lista(lista_adj, usuario_id)
nomes_recomendados = [nomes_usuarios[i] for i in recomendacoes]
print("Recomendações de amizade para {}: {}".format(nome_usuario, ", ".join(nomes_recomendados)))

# Desenha o grafo com as recomendações.
desenhar_recomendacoes_lista(lista_adj, usuario_id, recomendacoes, nomes_usuarios)

